import cv2
import numpy as np
img=cv2.imread('C:\\Users\\SAMSUNG\\Desktop\\GoYoonJong.jpg',cv2.IMREAD_COLOR)
height, width=img.shape[:2]
angle=45
radian=angle*np.pi/180
c=np.cos(radian)
s=np.sin(radian)

rotation_matrix=np.array([[c,s,0],[-s,c,0],[0,0,1]],dtype=float)
dst=np.zeros(img.shape,dtype=np.uint8)
for y in range(height-1):
    for x in range(width-1):
        new_p=np.array([x,y,1])
        inv_rotation_matrix=np.linalg.inv(rotation_matrix)
        old_p=np.dot(inv_rotation_matrix,new_p)
        x_,y_=old_p[:2]
        x_=int(x_)
        y_=int(y_)
        if x_>0 and x_ < width and y_ >0 and y_<height:
            dst[y,x]=img[y_,x_]

result=cv2.hconcat([img,dst])
cv2.imshow('result',result)
cv2.waitKey(0)

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
points=np.array([[1,1],[1,2],[2,2],[2,1]])
A=np.array([[2,0],[0,2]])
fig=plt.figure()
ax=fig.add_subplot(1,1,1)
print(np.linalg.det(A))

ax.add_patch(patches.Polygon(points,fill=False,color='blue',zorder=1))
ax.add_patch(patches.Polygon(np.dot(points,A),fill=False,color='red',zorder=2))
ax.text(1.4,1.4,'A',size=15)
ax.text(2.9,2.9,'B',size=15)
ax.set_xticks(range(-1,6))
ax.set_yticks(range(-1,6))
ax.grid()
ax.set_axisbelow(True)
ax.set_aspect('auto',adjustable='box')
ax.spines['left'].set_position('zero')
ax.spines['bottom'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.show()


#ì¶•ì†Œ
import cv2
import numpy as np
img=cv2.imread('C:\\Users\\SAMSUNG\\Desktop\\GoYoonJong.jpg',cv2.IMREAD_COLOR)
height, width=img.shape[:2]
scale_factor=0.5
scaling_matrix=np.array([[scale_factor,0,0],[0,scale_factor,0],[0,0,1]])
dst=np.zeros((height,width,img.shape[2]),dtype=np.uint8)

for y in range(height):
    for x in range(width):
        new_p=np.array([x,y,1])
        inv_scaling_matrix=np.linalg.inv(scaling_matrix)
        old_p=np.dot(inv_scaling_matrix,new_p)
        x_,y_=old_p[:2]
        x_=int(x_)
        y_=int(y_)
        if x_>0 and x_ < width and y_ >0 and y_<height:
            dst.itemset((y,x,0),img.item(y_,x_,0))
            dst.itemset((y,x,1),img.item(y_,x_,1))
            dst.itemset((y,x,2),img.item(y_,x_,2))


result=cv2.hconcat([img,dst])
cv2.imshow('result',dst)
cv2.waitKey(0)

#íšŒì „
import cv2
import numpy as np
img=cv2.imread('C:\\Users\\SAMSUNG\\Desktop\\GoYoonJong.jpg',cv2.IMREAD_COLOR)
height, width=img.shape[:2]
scale_factor=0.5
scaling_matrix=np.array([[scale_factor,0,0],[0,scale_factor,0],[0,0,1]])
translation_matrix=np.array([[1,0,width/4],[0,1,height/4],[0,0,1]])
angle=45
radian=angle*np.pi/180
c=np.cos(radian)
s=np.sin(radian)
center_x=width/2
center_y=height/2
rotation_matrix=np.array([[c,s,(1-c)*center_x-s*center_y],[-s,c,s*center_x+(1-c)*center_y],[0,0,1]])

T=np.eye(3)
T=np.dot(scaling_matrix,T)
T=np.dot(translation_matrix,T)
T=np.dot(rotation_matrix,T)
dst=np.zeros((height,width,img.shape[2]),dtype=np.uint8)

for y in range(height):
    for x in range(width):
        new_p=np.array([x,y,1])
        inv_scaling_matrix=np.linalg.inv(T)
        old_p=np.dot(inv_scaling_matrix,new_p)
        x_,y_=old_p[:2]
        x_=int(x_)
        y_=int(y_)
        if x_>0 and x_ < width and y_ >0 and y_<height:
            dst.itemset((y,x,0),img.item(y_,x_,0))
            dst.itemset((y,x,1),img.item(y_,x_,1))
            dst.itemset((y,x,2),img.item(y_,x_,2))



cv2.imshow('result',dst)
cv2.waitKey(0)
